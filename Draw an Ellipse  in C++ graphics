#include <graphics.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <conio.h>
#include<math.h>
#include<dos.h>
#include<string.h>
#include<iostream>
#include<ctime>



#define S_N_L (radius-10)        // Second Needle Length
#define S_N_C RED                   // Second needle Color
#define M_N_L (radius-20)           // Minute Needle Length
#define M_N_C LIGHTRED              // Minute Needle Color
#define H_N_L (radius-(radius/2))       // Hour Needle Length
#define H_N_C CYAN                     // Hour Needle Color
using namespace std; 
float cx,cy;
float radius=100;

void draw_face(float radius);
void get_time(int &h,int &m,int &s);
void second_needle(int s);
void minute_needle(int m,int s);
void hour_needle(int h,int m,int s);
void drawEllipse(int xc, int yc, int a, int b, float alpha, int color) ;
void ellipseovercircle(int xc, int yc, int r, int a, int b) ;
void slidePattern(int xc, int yc, int r, int a, int b, int alpha, float p, int color) ;

int main(void) {
	/* request auto detection */
	int gdriver = DETECT, gmode, errorcode;
	initgraph(&gdriver,&gmode,"d:\\tc\\bgi");
	/***********************************/
	cx=getmaxx()/2.0; // cx is center x value.
	cy=getmaxy()/2.0; // cy is center y value.
	/** Now the point (cx,cy) is the center of your screen. **/

	float x,y;
	int hour,minute,second;
	draw_face(radius);
	while(!kbhit()) {
		get_time(hour,minute,second);
		second_needle(second);
		minute_needle(minute,second);
		hour_needle(hour,minute,second);
		circle(cx,cy,2);
		delay(100);
	}


	getch();
	closegraph();
	return 0;

}
//*************** FUNCTIONS DEFINITIONS *****************//

void draw_face(float radius) {

	int theta=60; // theta is the angle variable.
	float x,y;
	/** Draw Clock Border. **/
//	ellipse(cx, cy, 0, 360, radius+24+50, radius+24);
//	ellipse(cx, cy, 0, 360, radius+24+50, radius+24);
	   
   // ellipseovercircle(cx, cy, 100, 40, 28);
	 int r= radius+24+50;
	  int a=48;
	int b=28;
	 drawEllipse(cx, cy, radius+24+50, radius+24,50, WHITE); 


	for(int i=0; i<9; i++)
	{
	 drawEllipse(cx, cy,  radius+13+i+50,radius+13+i,50, BROWN); 		
	}
	
		

	/** Set the color white. **/
	setcolor(WHITE);
	/** Draw outer-inner border. **/
		 drawEllipse(cx, cy,  radius+12+50,radius+12,50, WHITE); 
		  drawEllipse(cx, cy,  radius+10+50,radius+10,50, WHITE); 
		ellipse(cx, cy, 0, 360,2, 2);
	/** Draw center dot. **/
	int i=0;
	
	
	do {
		/** Getting (x,y) for numeric points **/
		x=cx+radius*cos(theta*M_PI/180);
		y=cy+radius*sin(theta*M_PI/180);
		/** Draw Numeric Points **/
		circle(x,y,2);
		/* Draw Dots around each numeric points **/
		circle(x+5,y,0);
		circle(x-5,y,0);
		circle(x,y+5,0);
		circle(x,y-5,0);
		/** Increase angle by 30 degrees, which is the circular distance between each numeric points. **/
		theta+=30;
		/** Increase i by 1. **/
		i++;
	} while(i!=12); //LIMIT NUMERIC POINTS UPTO =12= Numbers.
	i=0;
	/** DRAW DOTS BETWEEN NUMERIC POINTS. **/
	do {
		putpixel(cx+radius*cos(i*M_PI/180),cy+radius*sin(i*M_PI/180),DARKGRAY);
		i+=6;
	} while(i!=360);

	/** FACE COMPLETELY DRAWN. **/
}



void drawEllipse(int xc, int yc, int a, int b, float alpha, int color) 
{ 
    float t = 3.14 / 180; 
    alpha = 360 - alpha; 
    setcolor(color); 
    int theta; 
    // Filling each pixel corresponding 
    // to every angle from 0 to 360 
    for (int i = 0; i < 360; i += 1) { 
        theta = i; 
        int x = a * cos(t * theta) * cos(t * alpha) 
                + b * sin(t * theta) * sin(t * alpha); 
  
        int y = b * sin(t * theta) * cos(t * alpha) 
                - a * cos(t * theta) * sin(t * alpha); 
  
       putpixel(xc + x, yc - y, color); 
    } 
} 
  
  
  
void get_time(int &h,int &m,int &s) {
	time_t rawtime;
	struct tm *t;
	time(&rawtime);
	t = gmtime(&rawtime);
	h=t->tm_hour;
	m=t->tm_min;
	s=t->tm_sec;
}
//=================
/** Function to draw Second needle. **/
void second_needle(int s) {

	float angle=-90;
	float sx,sy;
	setcolor(0);
	sx=cx+S_N_L*cos((angle+s*6-6)*M_PI/180);
	sy=cy+S_N_L*sin((angle+s*6-6)*M_PI/180);
	line(cx,cy,sx,sy);
	setcolor(S_N_C);
	sx=cx+S_N_L*cos((angle+s*6)*M_PI/180);
	sy=cy+S_N_L*sin((angle+s*6)*M_PI/180);
	line(cx,cy,sx,sy);
}
/** Function to draw Minute needle. **/
void minute_needle(int m,int s) {
	float angle=-90;
	float sx,sy;
	setcolor(0);
	sx=cx+M_N_L*cos((angle+m*6-6)*M_PI/180);
	sy=cy+M_N_L*sin((angle+m*6-6)*M_PI/180);
	line(cx,cy,sx,sy);
	setcolor(M_N_C);
	sx=cx+M_N_L*cos((angle+m*6/*+(s*6/60)*/)*M_PI/180);
	sy=cy+M_N_L*sin((angle+m*6/*+(s*6/60)*/)*M_PI/180);
	line(cx,cy,sx,sy);
}
/** Function to draw Hour needle. **/
void hour_needle(int h,int m,int s) {
	float angle=-90;
	float sx,sy;
	setcolor(0);
	sx=cx+H_N_L*cos((angle+h*30-(m*30/60))*M_PI/180);
	sy=cy+H_N_L*sin((angle+h*30-(m*30/60))*M_PI/180);
	line(cx,cy,sx,sy);
	setcolor(H_N_C);
	sx=cx+H_N_L*cos((angle+h*30+(m*30/60))*M_PI/180);
	sy=cy+H_N_L*sin((angle+h*30+(m*30/60))*M_PI/180);
	line(cx,cy,sx,sy);
}
